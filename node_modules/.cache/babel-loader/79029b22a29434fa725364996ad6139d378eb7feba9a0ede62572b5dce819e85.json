{"ast":null,"code":"const SESSION_KEY='ticketapp_session';const USERS_KEY='ticketapp_users';const getUsers=()=>{const users=localStorage.getItem(USERS_KEY);return users?JSON.parse(users):[{id:'1',email:'admin@ticketflow.com',password:'admin123',name:'Admin User'}];};const saveUsers=users=>{localStorage.setItem(USERS_KEY,JSON.stringify(users));};export const auth={login:(email,password)=>{const users=getUsers();const user=users.find(u=>u.email===email&&u.password===password);if(user){const session={userId:user.id,email:user.email,name:user.name};localStorage.setItem(SESSION_KEY,JSON.stringify(session));return{success:true,user:session};}return{success:false,error:'Invalid credentials'};},signup:(email,password,name)=>{if(!email||!password||!name){return{success:false,error:'All fields are required'};}const users=getUsers();if(users.find(u=>u.email===email)){return{success:false,error:'Email already exists'};}const newUser={id:Date.now().toString(),email,password,name};users.push(newUser);saveUsers(users);const session={userId:newUser.id,email:newUser.email,name:newUser.name};localStorage.setItem(SESSION_KEY,JSON.stringify(session));return{success:true,user:session};},logout:()=>{localStorage.removeItem(SESSION_KEY);},isAuthenticated:()=>{return!!localStorage.getItem(SESSION_KEY);},getCurrentUser:()=>{const session=localStorage.getItem(SESSION_KEY);return session?JSON.parse(session):null;}};","map":{"version":3,"names":["SESSION_KEY","USERS_KEY","getUsers","users","localStorage","getItem","JSON","parse","id","email","password","name","saveUsers","setItem","stringify","auth","login","user","find","u","session","userId","success","error","signup","newUser","Date","now","toString","push","logout","removeItem","isAuthenticated","getCurrentUser"],"sources":["C:/Users/Divine/Desktop/HNG/Frontend Stage2 React/src/utils/auth.js"],"sourcesContent":["const SESSION_KEY = 'ticketapp_session';\nconst USERS_KEY = 'ticketapp_users';\n\nconst getUsers = () => {\n  const users = localStorage.getItem(USERS_KEY);\n  return users ? JSON.parse(users) : [\n    { id: '1', email: 'admin@ticketflow.com', password: 'admin123', name: 'Admin User' }\n  ];\n};\n\nconst saveUsers = (users) => {\n  localStorage.setItem(USERS_KEY, JSON.stringify(users));\n};\n\nexport const auth = {\n  login: (email, password) => {\n    const users = getUsers();\n    const user = users.find(u => u.email === email && u.password === password);\n    \n    if (user) {\n      const session = { userId: user.id, email: user.email, name: user.name };\n      localStorage.setItem(SESSION_KEY, JSON.stringify(session));\n      return { success: true, user: session };\n    }\n    return { success: false, error: 'Invalid credentials' };\n  },\n\n  signup: (email, password, name) => {\n    if (!email || !password || !name) {\n      return { success: false, error: 'All fields are required' };\n    }\n    \n    const users = getUsers();\n    if (users.find(u => u.email === email)) {\n      return { success: false, error: 'Email already exists' };\n    }\n    \n    const newUser = {\n      id: Date.now().toString(),\n      email,\n      password,\n      name\n    };\n    \n    users.push(newUser);\n    saveUsers(users);\n    \n    const session = { userId: newUser.id, email: newUser.email, name: newUser.name };\n    localStorage.setItem(SESSION_KEY, JSON.stringify(session));\n    return { success: true, user: session };\n  },\n\n  logout: () => {\n    localStorage.removeItem(SESSION_KEY);\n  },\n\n  isAuthenticated: () => {\n    return !!localStorage.getItem(SESSION_KEY);\n  },\n\n  getCurrentUser: () => {\n    const session = localStorage.getItem(SESSION_KEY);\n    return session ? JSON.parse(session) : null;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}